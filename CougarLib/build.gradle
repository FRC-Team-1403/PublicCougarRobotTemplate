plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.1.1"
    id "org.kordamp.gradle.markdown" version "2.2.0"
    id "checkstyle"
    id "pmd"
    id "jacoco"
}

markdownToHtml {
  sourceDir = file("docs")
}

checkstyle {
    toolVersion = '10.3.2'
    configFile = file("buildSrc/checkstyle.xml")
    reportsDir = file("${project.rootDir}/build/reports/${project.name}/checkstyle")
    // Dont check test code
    sourceSets = [project.sourceSets.main]
}


jacoco {
    toolVersion = '0.8.8'
}

pmd {
    toolVersion = '6.47.0'
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("buildSrc/pmd.xml")
    reportsDir = file("${project.rootDir}/build/reports/${project.name}/pmd")
}

test {
    // This is needed to work with JUnit5
    // Otherwise no tests are run.
    useJUnitPlatform()

    testLogging {
      // Show code printf output to console
      showStandardStreams = true

      // Write test failure reasons to console
      exceptionFormat "full"
    }

    systemProperties = [
        'junit.jupiter.extensions.autodetection.enabled': 'true',
        'java.util.logging.config.file': "${project.projectDir}/src/test/config/test.logging.properties"
    ]

    jacoco {
        enabled = true
	includes = []
	excludes = []
	output = JacocoTaskExtension.Output.FILE
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
      // The "excludes" in the jacoco still keeps the directories in the report.
      // Remove those directories entirely.
      // https://www.baeldung.com/jacoco-report-exclude#2-gradle-configuration
      classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [])
      }))
    }
}


// --------------  Stripped down WPILib build.gradle  --------------
// Removed
//    *  ROBOT_MAIN_CLASS
//    *  jar {} creating the ROBOT jar
//    *  simulator properties
// We aren't building robots in the repository.
// -----------------------------------------------------------------

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}


// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

